on:
  push:
    branches:
    - master
  pull_request: {}

name: Continuous integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test-features:
    name: Test Features
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          -
          - --all-features
          - --no-default-features
          - --no-default-features --features issue-url
          - --no-default-features --features capture-spantrace
          - --no-default-features --features track-caller
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }}

  test-versions:
    name: Test Versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown
        rust:
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust }}
          override: true
      - name: install test runner for wasm
        run:  curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        if: ${{ matrix.target == 'wasm32-unknown-unknown' }}
      - uses: actions-rs/cargo@v1
        with:
          command: test
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust }}
        if: ${{ matrix.target != 'wasm32-unknown-unknown' }}
      - name: run wasm tests
        run: wasm-pack test --node
        if: ${{ matrix.target == 'wasm32-unknown-unknown' }}

  test-os:
    name: Test Operating Systems
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
